--Include all keys and fact attributes from f_interactions_call and excludes deleted records
--Include most commonly used dimensional attributes with high cardinality (territory_type, therapeutic_class, therapeutic_sub_class)

--Creating fact table that includes commonly used dimensional attributes
-- REM Add compression encoding
-- REM Add sort key & distribution
-- All sort keys should be encoded raw and all other fields set to ZSTD encoding
-- Fact tables should be distributed even or keyed on the largest dimensional table commonly joined

DROP TABLE IF EXISTS rpt_apollo.ptab_f_interactions_call_curr_old;


CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_interactions_call_curr_new
(
  interaction_id               bigint   ENCODE ZSTD,
   is_parent_call               varchar(1)   ENCODE ZSTD,
   detail_priority              numeric(2)   ENCODE ZSTD,
   quantity                     numeric(22,7)   ENCODE ZSTD,
   child_ld						varchar(255)    ENCODE ZSTD,
   pre_call_notes               varchar(255)   ENCODE ZSTD,
   discussion_num_of_attendees  numeric(22)   ENCODE ZSTD,
   clm_id                       varchar(100)   ENCODE ZSTD,
   display_order                numeric(22)   ENCODE ZSTD,
   presentation_id              varchar(100)   ENCODE ZSTD,
   slide_version                varchar(100)   ENCODE ZSTD,
   key_message_start_time       timestamp   ENCODE ZSTD,
   Call_Name                    varchar(80)   ENCODE ZSTD,
   interaction_call_id          varchar(255)   ENCODE ZSTD,
   datasource_id                varchar(30)  ,
   account_id                   bigint   ENCODE ZSTD NOT NULL,
   customer_id                  bigint  ENCODE ZSTD NOT NULL,
   product_id                   bigint   ENCODE ZSTD NOT NULL,
   employee_id                  bigint   ENCODE ZSTD ,
   position_id                  bigint   ENCODE ZSTD NOT NULL,
   day_id                       bigint   ENCODE ZSTD NOT NULL,
   address_id                   bigint   ENCODE ZSTD,
   isdeleted                    varchar(1)   ENCODE ZSTD,
   territory_type            varchar(100) ,
   market                    varchar(100) ENCODE ZSTD ,
   therapeutic_class          varchar(100) ENCODE ZSTD,
   therapeutic_sub_class      varchar(100)  ENCODE ZSTD,
   week_ending_date           date         ENCODE ZSTD,
   "day"                      date         ENCODE ZSTD,
   source_unique_id           varchar(255)  ENCODE ZSTD,
   --Add LOV tables for each LID
   attendee_type       varchar(100)   ENCODE ZSTD,	
   call_type              varchar(100)   ENCODE ZSTD,	
   interaction_sub_type     varchar(100)   ENCODE ZSTD,	
   interaction_type       varchar(100)   ENCODE ZSTD,	
   detail_type              varchar(100)   ENCODE ZSTD,	
   delivery_status          varchar(100)   ENCODE ZSTD,	
   child_type               varchar(100)   ENCODE ZSTD,	
   product_type             varchar(100)   ENCODE ZSTD,	
   discussion_topics        varchar(100)   ENCODE ZSTD,	
   product_strategy         varchar(100)   ENCODE ZSTD,	
   clinical_research        varchar(100)   ENCODE ZSTD,	
   discussion_class         varchar(100)   ENCODE ZSTD,	
   device_trained           varchar(100)   ENCODE ZSTD,	
   call_focus               varchar(100)   ENCODE ZSTD,	
   category                 varchar(100)   ENCODE ZSTD,	
   reaction                 varchar(100)   ENCODE ZSTD,	
   activity_type            varchar(100)   ENCODE ZSTD,	
   call_status              varchar(100)   ENCODE ZSTD,	
   --Address Attributes
    Street_Address			varchar(110)  ENCODE ZSTD,
	Best_Address_Flag		varchar(1)    ENCODE ZSTD,
	City					varchar(50)	  ENCODE ZSTD,
	Zipcode				    varchar(10)	  ENCODE ZSTD,
	State                   varchar(50)   ENCODE ZSTD,
  -- Employee Number
    Employee_Login			varchar(5)	  ENCODE ZSTD
  
)	
COMPOUND SORTKEY (datasource_id, territory_type, market, therapeutic_class, therapeutic_sub_class, week_ending_date, day)   
;
--Loading Data Into Table In Sort Key Order
--REM Add Order By   
   INSERT INTO rpt_apollo.ptab_f_interactions_call_curr_new
(
    interaction_id,
       is_parent_call,
       detail_priority,
       quantity,
	   child_ld,
       pre_call_notes,
       discussion_num_of_attendees,
       clm_id,
       display_order,
       presentation_id,
       slide_version,
       key_message_start_time,
       call_name,
       interaction_call_id,
       datasource_id,
       account_id,
       customer_id,
       product_id,
       employee_id,
       position_id,
       day_id,
       address_id,
       isdeleted,
	   territory_type,
       market,
       therapeutic_class,
       therapeutic_sub_class,
       week_ending_date,
       "day",
	    source_unique_id   ,
       attendee_type,
       call_type,
       interaction_sub_type,
       interaction_type,
       detail_type,
       delivery_status,
       child_type,
       product_type,
       discussion_topics,
       product_strategy,
       clinical_research,
       discussion_class,
       device_trained,
       call_focus,
       category,
       reaction,
       activity_type,
       call_status,
       street_address,
       best_address_flag,
       city,
       zipcode,
       state,
       employee_login
)
(
--Recommend to use Even distribution or Key distribution on customer_id if customer_id is equally distributed over commonly used query domain
SELECT 
  f_interactions_call.interaction_id               ,
   CASE f_interactions_call.is_parent_call              
   when 1 then 'Y'
   else 'N'
   end   ,
   f_interactions_call.detail_priority              ,
   f_interactions_call.quantity                     ,
   f_interactions_call.child_ld                     ,
   f_interactions_call.pre_call_notes               ,
   f_interactions_call.discussion_num_of_attendees  ,
   f_interactions_call.clm_id                       ,
   f_interactions_call.display_order                ,
   f_interactions_call.presentation_id              ,
   f_interactions_call.slide_version                ,
   f_interactions_call.key_message_start_time       ,
   f_interactions_call.call_alt_id                  ,
   f_interactions_call.interaction_call_id          ,
   f_interactions_call.datasource_id                ,
   NVL(f_interactions_call.account_id, -99999)                 ,
   NVL(f_interactions_call.customer_id , -99999)                 ,
   NVL(f_interactions_call.product_id   , -99999)                ,
   f_interactions_call.employee_id                  ,
   NVL(f_interactions_call.position_id  , -99999)                ,
   NVL(f_interactions_call.day_id     , -99999)                  ,
   f_interactions_call.address_id                   ,
   f_interactions_call.isdeleted                   ,
   case when pos.salesforce_value LIKE '%_O' THEN pos.salesforce_value else pos.type end as territory_type ,
   case when prh_hierarchy_lvl < 12
  then prh_top_hl_prod_name 
  end as market,
  case when prh_hierarchy_lvl < 10
  then prh_hl9_product_name 
  end as therapeutic_class,
   case when prh_hierarchy_lvl < 9
  then prh_hl8_product_name 
  end as therapeutic_sub_class,
   day.d_split_week_ending_date,
   day.d_day_dt,
    f_interactions_call.source_unique_id   ,
   attendee_type_lov.value            ,	
   call_type_lov.value                ,	
   interaction_sub_type_lov.value     ,	
   interaction_type_lov.value         ,	
   detail_type_lov.value              ,	
   delivery_status_lov.value          ,	
   child_type_lov.value               ,	
   product_type_lov.value             ,	
   discussion_topics_lov.value        ,	
   product_strategy_lov.value         ,	
   clinical_research_lov.value        ,	
   discussion_class_lov.value         ,	
   device_trained_lov.value           ,	
   call_focus_lov.value               ,	
   category_lov.value                 ,	
   reaction_lov.value                 ,	
   activity_type_lov.value            ,	
   call_status_lov.value              ,	
   add.addr_ln1_txt,
   add.best_addr_ind,
   add.city_nm,
   add.postl_cd,
   add.st_provn_cd,
   emp.emp_initials		
   

FROM
 rpt_facts.f_interactions_call f_interactions_call
	LEFT JOIN rpt_dims.d_address add on (f_interactions_call.address_id = add.address_id)
	LEFT JOIN rpt_dims.d_employee emp on (f_interactions_call.employee_id = emp.employee_id)
	INNER JOIN rpt_dims.d_position pos ON (f_interactions_call.position_id = pos.position_id)
	  LEFT JOIN rpt_apollo.ptab_d_product_full prod on prod.product_id = f_interactions_call.product_id
  LEFT JOIN rpt_apollo.ptab_d_day_full day on day.day_id = f_interactions_call.day_id
-- Left Joining the LOV tables in case a term definition is missing	
	LEFT JOIN rpt_dims.d_lov call_type_lov ON (f_interactions_call.call_type_lid = call_type_lov.lov_id and call_type_lov.type = 'CALL_TYPE_LID')
	LEFT JOIN rpt_dims.d_lov interaction_sub_type_lov ON (f_interactions_call.interaction_sub_type_lid = interaction_sub_type_lov.lov_id and interaction_sub_type_lov.type ='INTERACTION_SUB_TYPE')
	LEFT JOIN rpt_dims.d_lov interaction_type_lov ON (f_interactions_call.interaction_type_lid = interaction_type_lov.lov_id and interaction_type_lov.type ='INTERACTION_TYPE')
	LEFT JOIN rpt_dims.d_lov detail_type_lov ON (f_interactions_call.detail_type_lid = detail_type_lov.lov_id and detail_type_lov.type = 'DETAIL_TYPE_LID')
	LEFT JOIN rpt_dims.d_lov delivery_status_lov ON (f_interactions_call.delivery_status_lid = delivery_status_lov.lov_id and delivery_status_lov.type = 'DELIVERY_STATUS_LID')
	LEFT JOIN rpt_dims.d_lov child_type_lov ON (f_interactions_call.child_type_lid = child_type_lov.lov_id and child_type_lov.type = 'CHILD_TYPE_LID')
	LEFT JOIN rpt_dims.d_lov product_type_lov ON (f_interactions_call.product_type_lid = product_type_lov.lov_id and product_type_lov.type ='PRODUCT_TYPE')
	LEFT JOIN rpt_dims.d_lov discussion_topics_lov ON (f_interactions_call.discussion_topics_lid = discussion_topics_lov.lov_id and discussion_topics_lov.type ='DISCUSSION_TOPICS_LID')
	LEFT JOIN rpt_dims.d_lov product_strategy_lov ON (f_interactions_call.product_strategy_lid = product_strategy_lov.lov_id and product_strategy_lov.type = 'PRODUCT_STRATEGY_LID')
	LEFT JOIN rpt_dims.d_lov clinical_research_lov ON (f_interactions_call.clinical_research_lid = clinical_research_lov.lov_id and clinical_research_lov.type = 'CLINICAL_RESEARCH_LID')
	LEFT JOIN rpt_dims.d_lov discussion_class_lov ON (f_interactions_call.discussion_class_lid = discussion_class_lov.lov_id and discussion_class_lov.type = 'DISCUSSION_CLASS_LID')
	LEFT JOIN rpt_dims.d_lov device_trained_lov ON (f_interactions_call.device_trained_lid = device_trained_lov.lov_id and device_trained_lov.type = 'DEVICE_TRAINED_LID')
	LEFT JOIN rpt_dims.d_lov call_focus_lov ON (f_interactions_call.call_focus_lid = call_focus_lov.lov_id and call_focus_lov.type = 'CALL_FOCUS_LID')
	LEFT JOIN rpt_dims.d_lov category_lov ON (f_interactions_call.category_lid = category_lov.lov_id and category_lov.type = 'CATEGORY')
	LEFT JOIN rpt_dims.d_lov reaction_lov ON (f_interactions_call.reaction_lid = reaction_lov.lov_id and reaction_lov.type = 'REACTION_LID')
	LEFT JOIN rpt_dims.d_lov activity_type_lov ON (f_interactions_call.activity_type_lid = activity_type_lov.lov_id and activity_type_lov.type = 'ACTIVITY_TYPE_LID')
	LEFT JOIN rpt_dims.d_lov call_status_lov ON (f_interactions_call.call_status_lid = call_status_lov.lov_id and call_status_lov.type = 'CALL_STATUS_LID')
    LEFT JOIN rpt_dims.d_lov attendee_type_lov ON (f_interactions_call.attendee_type_lid = attendee_type_lov.lov_id and attendee_type_lov.type = 'ATTENDEE_TYPE_LID')
	
WHERE f_interactions_call.isdeleted<>'Y' or f_interactions_call.isdeleted is null
);

VACUUM FULL  rpt_apollo.ptab_f_interactions_call_curr_new to 99 PERCENT;



GRANT TRIGGER, RULE, SELECT, DELETE, UPDATE, REFERENCES, INSERT ON rpt_apollo.ptab_f_interactions_call_curr_new TO oasis_cdw_tst_procuser;
GRANT SELECT ON rpt_apollo.ptab_f_interactions_call_curr_new TO group oasis_cdw_tst_readuser_group;

CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_interactions_call_curr
(
  interaction_id               bigint   ENCODE ZSTD
);


ALTER TABLE  rpt_apollo.ptab_f_interactions_call_curr RENAME TO  ptab_f_interactions_call_curr_old;

ALTER TABLE  rpt_apollo.ptab_f_interactions_call_curr_new RENAME TO  ptab_f_interactions_call_curr;


--Include all keys and fact attributes from f_sales_nbrx_terr
--Include most commonly used dimensional attributes with high cardinality (territory_type, therapeutic_class, therapeutic_sub_class)

--Creating fact table that includes commonly used dimensional attributes
-- REM Add compression encoding
-- REM Add sort key & distribution
-- All sort keys should be encoded raw and all other fields set to ZSTD encoding
-- Fact tables should be distributed even or keyed on the largest dimensional table commonly joined

DROP TABLE IF EXISTS rpt_apollo.ptab_f_sales_nbrx_terr_old;

CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_nbrx_terr_new
(
   customer_id           bigint  ENCODE ZSTD NOT NULL,
   product_id            integer  ENCODE ZSTD NOT NULL,
   day_id                integer  ENCODE ZSTD NOT NULL,
   dynamics_type_id      integer  ,
   position_id           integer  ENCODE ZSTD NOT NULL,
    from_product_id       integer  ENCODE ZSTD NOT NULL,
	territory_type            varchar(100) ,
   market                    varchar(100) ENCODE ZSTD ,
   therapeutic_class          varchar(100) ENCODE ZSTD,
   therapeutic_sub_class      varchar(100)  ENCODE ZSTD,
   week_ending_date           date         ENCODE ZSTD,
   "day"                      date         ENCODE ZSTD,
   nbrx_unaligned_id     varchar(255)  ENCODE ZSTD,
   poa_id                integer  ENCODE ZSTD,
   apportionment_nbrx    numeric(22,7)  ENCODE ZSTD,
   apportionment_ltrx    numeric(22,7)  ENCODE ZSTD,
 
   --Nbrx Dynamics Type Id from d_lov
   source_of_business		  varchar(50)  ENCODE ZSTD,
   --Brand Eligiblity Flag Yes/No
   brand_eligibility_flag  varchar(5)      ENCODE ZSTD,
   datasource_id           varchar(30)     ENCODE ZSTD,
   source_unique_id        varchar(30)     ENCODE ZSTD
   
)
COMPOUND SORTKEY (dynamics_type_id, territory_type, market, therapeutic_class, therapeutic_sub_class, week_ending_date, day) 
;
--Loading Data Into Table In Sort Key Order
--REM Add Order By   
   INSERT INTO rpt_apollo.ptab_f_sales_nbrx_terr_new
(      customer_id,
       product_id,
       day_id,
       dynamics_type_id,
       position_id,
	    from_product_id,
		territory_type,
       market,
       therapeutic_class,
       therapeutic_sub_class,
       week_ending_date,
       "day",
       nbrx_unaligned_id,
       poa_id,
       apportionment_nbrx,
       apportionment_ltrx,
	    source_of_business,
		brand_eligibility_flag,
        datasource_id,
		source_unique_id

)
  

(
--Recommend to use Even distribution or Key distribution on customer_id if customer_id is equally distributed over commonly used query domain
-- Nbrx for non-market access Diabetes
SELECT 
   nvl(n.customer_id, -99999)           ,
   nvl(n.product_id, -99999)             ,
   nvl(n.day_id, -99999)                 ,
      n.dynamics_type_id        ,
   nvl(fca.position_id, -99999)           ,
   nvl(n.from_product_id, -99999)         ,
    case when pos.salesforce_value LIKE '%_O' THEN pos.salesforce_value else pos.type end as territory_type ,
   case when prod.prh_hierarchy_lvl < 12
  then prod.prh_top_hl_prod_name 
  end as market,
  case when prod.prh_hierarchy_lvl < 10
  then prod.prh_hl9_product_name 
  end as therapeutic_class,
   case when prod.prh_hierarchy_lvl < 9
  then prod.prh_hl8_product_name 
  end as therapeutic_sub_class,
   day.d_split_week_ending_date,
   day.d_day_dt,
   n.nbrx_unaligned_id       ,
   cast(n.poa_id as integer)                  ,
   --Cast to 3 decimal places
   NVL(CAST(n.nbrx * fca.apportionment_factor AS numeric(22,7)),0)       ,
   NVL(CAST(n.ltrx * fca.apportionment_factor AS numeric (22,7)) ,0)     ,
   --Nbrx Dynamics Type Id
   nbrx_dynamics_lov.name		 ,
   --Brand Eligiblity Flag Yes/No
   brand_eligibility_lov.value  ,
   n.datasource_id,
   n.source_unique_id

 FROM
  rpt_facts.f_sales_nbrx_unaligned n
    INNER JOIN 
  (SELECT fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip
  from rpt_facts.f_customer_alignment fca
  group by fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip)
  fca ON (fca.customer_id = n.customer_id)
  INNER JOIN rpt_dims.d_poa poa2 ON (poa2.poa_id = fca.poa_id)
  INNER JOIN rpt_dims.d_position pos ON (fca.position_id = pos.position_id)
  INNER JOIN rpt_dims.d_position_hierarchy phi ON (pos.position_id = phi.position_id)
  INNER JOIN rpt_dims.d_poa poa ON (phi.poa_id=poa.poa_id)
  INNER JOIN rpt_apollo.ptab_d_product_full prod on prod.product_id = n.product_id
  LEFT JOIN rpt_apollo.ptab_d_day_full day on day.day_id = n.day_id
  LEFT JOIN rpt_dims.d_lov nbrx_dynamics_lov ON (nbrx_dynamics_lov.lov_id = n.dynamics_type_id and nbrx_dynamics_lov.type='NBRX_DYNAMICS_TYPE')
  LEFT JOIN rpt_dims.d_lov brand_eligibility_lov on (brand_eligibility_lov.lov_id = n.brand_eligibility_id and brand_eligibility_lov.type ='YES_NO_FLAG')
  WHERE (poa.active_flag = 'CURRENT' and poa2.active_flag = 'CURRENT') and fca.alignment_level = 'TERRITORY' AND fca.datasource_id in ( 'PROF' ,'PROF_NBRX') AND UPPER(poa2.type) like '%SALES%'
  and phi.sales_force in ( 
  --Diabetes Data
  'HSDE','DIABETES CARE')
  and n.datasource_id = 'DIAB_NBRX'
UNION ALL
-- Nbrx for non-Market Access AOB
SELECT 
   nvl(n.customer_id, -99999)           ,
   nvl(n.product_id, -99999)             ,
   nvl(n.day_id, -99999)                 ,
      n.dynamics_type_id        ,
   nvl(fca.position_id, -99999)           ,
   nvl(n.from_product_id, -99999)         ,
    case when pos.salesforce_value LIKE '%_O' THEN pos.salesforce_value else pos.type end as territory_type ,
   case when prod.prh_hierarchy_lvl < 12
  then prod.prh_top_hl_prod_name 
  end as market,
  case when prod.prh_hierarchy_lvl < 10
  then prod.prh_hl9_product_name 
  end as therapeutic_class,
   case when prod.prh_hierarchy_lvl < 9
  then prod.prh_hl8_product_name 
  end as therapeutic_sub_class,
   day.d_split_week_ending_date,
   day.d_day_dt,
   n.nbrx_unaligned_id       ,
   cast(n.poa_id as integer)                  ,
   --Cast to 3 decimal places
   NVL(CAST(n.nbrx * fca.apportionment_factor AS numeric(22,7)),0)       ,
   NVL(CAST(n.ltrx * fca.apportionment_factor AS numeric (22,7)) ,0)     ,
   --Nbrx Dynamics Type Id
   nbrx_dynamics_lov.name		 ,
   --Brand Eligiblity Flag Yes/No
   brand_eligibility_lov.value  ,
    n.datasource_id,
   n.source_unique_id
FROM
  
  rpt_facts.f_sales_nbrx_unaligned n
    INNER JOIN 
  (SELECT fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip
  from rpt_facts.f_customer_alignment fca
  group by fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip)
  fca ON (fca.customer_id = n.customer_id)
   INNER JOIN rpt_dims.d_poa poa2 ON (poa2.poa_id = fca.poa_id)
  INNER JOIN rpt_dims.d_position pos ON (fca.position_id = pos.position_id)
  INNER JOIN rpt_dims.d_position_hierarchy phi ON (pos.position_id = phi.position_id)
  INNER JOIN rpt_dims.d_poa poa ON (phi.poa_id=poa.poa_id)
  INNER JOIN rpt_apollo.ptab_d_product_full prod on prod.product_id = n.product_id
  INNER JOIN rpt_apollo.ptab_d_day_full day on day.day_id = n.day_id
  LEFT JOIN rpt_dims.d_lov nbrx_dynamics_lov ON (nbrx_dynamics_lov.lov_id = n.dynamics_type_id and nbrx_dynamics_lov.type='NBRX_DYNAMICS_TYPE')
  LEFT JOIN rpt_dims.d_lov brand_eligibility_lov on (brand_eligibility_lov.lov_id = n.brand_eligibility_id and brand_eligibility_lov.type ='YES_NO_FLAG')
  --Adding Target Flags  
  WHERE (poa.active_flag = 'CURRENT' and poa2.active_flag = 'CURRENT') and fca.alignment_level = 'TERRITORY' AND fca.datasource_id in ( 'PROF' ,'PROF_NBRX') AND UPPER(poa2.type) like '%SALES%'
  and phi.sales_force in ( 
  --AOB Data
  'AOM','OEP')
  and n.datasource_id = 'AOB_NBRX'
);
--Vacuuming and Analyzing to Speed Up Subsequent Market Access Load
VACUUM FULL  rpt_apollo.ptab_f_sales_nbrx_terr_new to 99 PERCENT;	
ANALYZE  rpt_apollo.ptab_f_sales_nbrx_terr_new ;	





	 

GRANT TRIGGER, RULE, SELECT, DELETE, UPDATE, REFERENCES, INSERT ON rpt_apollo.ptab_f_sales_nbrx_terr_new TO oasis_cdw_tst_procuser;
GRANT SELECT ON rpt_apollo.ptab_f_sales_nbrx_terr_new TO group oasis_cdw_tst_readuser_group;	
		

--Creating a dummy entry so below doesn't fail if old table does not exist.
CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_nbrx_terr
(
   customer_id           bigint  ENCODE ZSTD NOT NULL
);


ALTER TABLE rpt_apollo.ptab_f_sales_nbrx_terr RENAME TO ptab_f_sales_nbrx_terr_old;

ALTER TABLE rpt_apollo.ptab_f_sales_nbrx_terr_new RENAME TO ptab_f_sales_nbrx_terr;


	  
	  
	  
	 --Include all keys and fact attributes from f_sales_xptrx
--Include most commonly used dimensional attributes with high cardinality (territory_type, therapeutic_class, therapeutic_sub_class)

--Creating fact table that includes commonly used dimensional attributes
-- REM Add compression encoding
-- REM Add sort key & distribution
-- All sort keys should be encoded raw and all other fields set to ZSTD encoding
-- Fact tables should be distributed even or keyed on the largest dimensional table commonly joined

DROP TABLE IF EXISTS rpt_apollo.ptab_f_sales_xptrx_terr_old;

CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_xptrx_terr_new
(
   xpt_trx_ins_niad_aob_id  bigint ENCODE ZSTD,
   customer_id              integer ENCODE ZSTD NOT NULL,
   position_id              integer  ENCODE ZSTD NOT NULL,
   product_id               integer ENCODE ZSTD NOT NULL,
   day_id                   integer NOT NULL,
   poa_id                   integer ENCODE ZSTD,
   plan_id                  integer  NOT NULL,
   territory_type            varchar(100) ,
   market                    varchar(100) ENCODE ZSTD ,
   therapeutic_class          varchar(100) ENCODE ZSTD,
   therapeutic_sub_class      varchar(100)  ENCODE ZSTD,
   week_ending_date           date         ENCODE ZSTD,
   "day"                      date         ENCODE ZSTD,
   apportionment_niad_trx   numeric(22,7) ENCODE ZSTD,
   apportionment_niad_nrx   numeric(22,7) ENCODE ZSTD,
   apportionment_trx        numeric(22,7) ENCODE ZSTD,
   apportionment_nrx        numeric(22,7) ENCODE ZSTD,
   category                 integer ENCODE ZSTD,
   zip                      varchar(10) ENCODE ZSTD,
   --Flags
   brand_eligibility_flag   varchar(100) ENCODE ZSTD,
   first_time_writer_flag      varchar(100) ENCODE ZSTD,
   recurrent_writer_flag     varchar(100)   ENCODE ZSTD,
   recurrent_writer_alt_flag    varchar(100)  ENCODE ZSTD,
   plan_exclusion_flag			varchar (100)  ENCODE ZSTD,
    datasource_id           varchar(30)     ENCODE ZSTD,
   source_unique_id        varchar(30)     ENCODE ZSTD
 
)
COMPOUND SORTKEY (territory_type, market, therapeutic_class, therapeutic_sub_class, week_ending_date, day) 
;
--Loading Data Into Table In Sort Key Order
   INSERT INTO rpt_apollo.ptab_f_sales_xptrx_terr_new
(
   xpt_trx_ins_niad_aob_id,
       customer_id,
       position_id,
       product_id,
       day_id,
       poa_id,
       plan_id,
	   apportionment_niad_trx,
       apportionment_niad_nrx,
       apportionment_trx,
       apportionment_nrx,
	   territory_type,
       market,
       therapeutic_class,
       therapeutic_sub_class,
       week_ending_date,
       "day",
       category,
       zip,
       brand_eligibility_flag,
       first_time_writer_flag,
       recurrent_writer_flag,
       recurrent_writer_alt_flag,
	   plan_exclusion_flag   ,
	   datasource_id,
		source_unique_id
		
  
)
  

(
--Recommend to use Even distribution or Key distribution on customer_id if customer_id is equally distributed over commonly used query domain
--Pulling for non-market access Diabetes
SELECT 
   n.xptrx_ins_niad_unaligned_id  ,
   NVL(n.customer_id , -99999)              ,
   NVL(fca.position_id  , -99999)             ,
   NVL(n.product_id   , -99999)              ,
   n.week_id                   ,
   poa2.poa_id                    ,
   NVL(n.plan_id      , -99999)             ,
   nvl(CAST(n.niad_trx * fca.apportionment_factor as numeric(22,7)), 0)  ,
   nvl(CAST(n.niad_nrx * fca.apportionment_factor as numeric(22,7)), 0)   ,
   nvl(CAST(n.trx * fca.apportionment_factor as numeric(22,7)), 0)       ,          
   nvl(CAST(n.nrx * fca.apportionment_factor AS numeric(22,7)), 0)        ,
   case when pos.salesforce_value LIKE '%_O' THEN pos.salesforce_value else pos.type end as territory_type ,
   case when prh_hierarchy_lvl < 12
  then prh_top_hl_prod_name 
  end as market,
  case when prh_hierarchy_lvl < 10
  then prh_hl9_product_name 
  end as therapeutic_class,
   case when prh_hierarchy_lvl < 9
  then prh_hl8_product_name 
  end as therapeutic_sub_class,
   day.d_split_week_ending_date,
   day.d_day_dt,
   n.category                  ,
   n.zip                      ,
   brand_eligibility_lov.value  ,
   fst_tm_wrtr_flag_lov.value    ,
   recurrent_writer_lov.value    ,
   recurrent_writer_alt_lov.value  ,
   plan_exclusion_lov.value         ,
   n.datasource_id,
   n.source_unique_id
   
  

   
FROM
  rpt_facts.f_sales_xptrx_ins_niad_unaligned n
  INNER JOIN 
  (SELECT fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.alignment_name, fca.sales_team, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip
  from rpt_facts.f_customer_alignment fca
  group by fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level,  fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip)
  fca on (fca.customer_id = n.customer_id)
  INNER JOIN rpt_dims.d_poa poa2 ON (poa2.poa_id = fca.poa_id)
  INNER JOIN rpt_dims.d_position pos ON (fca.position_id = pos.position_id)
  INNER JOIN rpt_dims.d_position_hierarchy phi ON (pos.position_id = phi.position_id)
  INNER JOIN rpt_dims.d_poa poa ON (phi.poa_id=poa.poa_id)
  INNER JOIN rpt_apollo.ptab_d_product_full prod on prod.product_id = n.product_id
  INNER JOIN rpt_apollo.ptab_d_day_full day on day.day_id = n.week_id
  LEFT JOIN rpt_dims.d_lov brand_eligibility_lov on n.brand_eligibility_id = brand_eligibility_lov.lov_id and brand_eligibility_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov fst_tm_wrtr_flag_lov on n.fst_tm_wrtr_flag_id = fst_tm_wrtr_flag_lov.lov_id and fst_tm_wrtr_flag_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov recurrent_writer_lov on n.recurrent_writer_id = recurrent_writer_lov.lov_id and recurrent_writer_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov recurrent_writer_alt_lov on n.recurrent_writer_alt_id = recurrent_writer_alt_lov.lov_id and recurrent_writer_alt_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov plan_exclusion_lov on n.plan_exclusion_id = plan_exclusion_lov.lov_id and plan_exclusion_lov.type ='YES_NO_FLAG'
  WHERE (poa.active_flag = 'CURRENT' and poa2.active_flag = 'CURRENT')   
  and fca.alignment_level = 'TERRITORY' 
  AND fca.datasource_id in ( 'PROF') 
  and UPPER(poa2.type) like '%SALES%' 
  --Using Position Hierarchy sales_force group instead of hard-coding sales force sources
  and phi.sales_force in ( 
  --Diabetes Data
  'HSDE','DIABETES CARE') 


UNION ALL

--Pulling for non-market access anti-obesity
SELECT 
   n.xptrx_aob_unaligned_id  ,
   n.customer_id               ,
   fca.position_id               ,
   n.product_id                ,
   n.week_id                   ,
   poa2.poa_id                    ,
   n.plan_id                   ,
   0  ,
   0  ,
   nvl(CAST(n.trx * fca.apportionment_factor as numeric(22,7)), 0)       ,          
   nvl(CAST(n.nrx * fca.apportionment_factor AS numeric(22,7)), 0)        ,
   case when pos.salesforce_value LIKE '%_O' THEN pos.salesforce_value else pos.type end as territory_type ,
   case when prh_hierarchy_lvl < 12
  then prh_top_hl_prod_name 
  end as market,
  case when prh_hierarchy_lvl < 10
  then prh_hl9_product_name 
  end as therapeutic_class,
   case when prh_hierarchy_lvl < 9
  then prh_hl8_product_name 
  end as therapeutic_sub_class,
   day.d_split_week_ending_date,
   day.d_day_dt,
   n.category                  ,
   n.zip                      ,
   brand_eligibility_lov.value  ,
   fst_tm_wrtr_flag_lov.value    ,
   recurrent_writer_lov.value    ,
   recurrent_writer_alt_lov.value  ,
     plan_exclusion_lov.value       ,
	    n.datasource_id,
   n.source_unique_id
	 FROM
  rpt_facts.f_sales_xptrx_aob_unaligned n
  INNER JOIN
  (SELECT fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip
  from rpt_facts.f_customer_alignment fca
  group by fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level,  fca.sales_team, fca.apportionment_factor, fca.alignment_name, fca.datasource_id, fca.overlay_position_id, fca.zip)
  fca on (fca.customer_id = n.customer_id)
  INNER JOIN rpt_dims.d_poa poa2 ON (poa2.poa_id = fca.poa_id)
  INNER JOIN rpt_dims.d_position pos ON (fca.position_id = pos.position_id)
  INNER JOIN rpt_dims.d_position_hierarchy phi ON (pos.position_id = phi.position_id)
  INNER JOIN rpt_dims.d_poa poa ON (phi.poa_id=poa.poa_id)
  INNER JOIN rpt_apollo.ptab_d_product_full prod on prod.product_id = n.product_id
  INNER JOIN rpt_apollo.ptab_d_day_full day on day.day_id = n.week_id
  LEFT JOIN rpt_dims.d_lov brand_eligibility_lov on n.brand_eligibility_id = brand_eligibility_lov.lov_id and brand_eligibility_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov fst_tm_wrtr_flag_lov on n.fst_tm_wrtr_flag_id = fst_tm_wrtr_flag_lov.lov_id and fst_tm_wrtr_flag_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov recurrent_writer_lov on n.recurrent_writer_id = recurrent_writer_lov.lov_id and recurrent_writer_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov recurrent_writer_alt_lov on n.recurrent_writer_alt_id = recurrent_writer_alt_lov.lov_id and recurrent_writer_alt_lov.type ='YES_NO_FLAG'
  LEFT JOIN rpt_dims.d_lov plan_exclusion_lov on n.plan_exclusion_id = plan_exclusion_lov.lov_id and plan_exclusion_lov.type ='YES_NO_FLAG'
  WHERE (poa.active_flag = 'CURRENT' and poa2.active_flag = 'CURRENT')  
  and fca.alignment_level = 'TERRITORY' 
  AND fca.datasource_id in ( 'PROF') 
  and UPPER(poa2.type) like '%SALES%' 
   --Using Position Hierarchy sales_force group instead of hard-coding sales force sources
  and phi.sales_force in ( 
  --Obesity Data
  'AOM','OEP')
 )
 ;
 --Vacuuming and Analyzing to Speed Up Subsequent Market Access Load
VACUUM FULL  rpt_apollo.ptab_f_sales_xptrx_terr_new to 99 PERCENT;
ANALYZE rpt_apollo.ptab_f_sales_xptrx_terr_new;



GRANT TRIGGER, RULE, SELECT, DELETE, UPDATE, REFERENCES, INSERT ON rpt_apollo.ptab_f_sales_xptrx_terr_new TO oasis_cdw_tst_procuser;
GRANT SELECT ON rpt_apollo.ptab_f_sales_xptrx_terr_new TO group oasis_cdw_tst_readuser_group;


--Creating a dummy entry so below doesn't fail if old table does not exist.
CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_xptrx_terr
(
   customer_id           bigint  ENCODE ZSTD NOT NULL
);



ALTER TABLE rpt_apollo.ptab_f_sales_xptrx_terr RENAME TO ptab_f_sales_xptrx_terr_old;

ALTER TABLE rpt_apollo.ptab_f_sales_xptrx_terr_new RENAME TO ptab_f_sales_xptrx_terr;






--Include all keys and fact attributes from f_sales_nbrx_terr
--Include most commonly used dimensional attributes with high cardinality (territory_type, therapeutic_class, therapeutic_sub_class)

--Creating fact table that includes commonly used dimensional attributes
-- REM Add compression encoding
-- REM Add sort key & distribution
-- All sort keys should be encoded raw and all other fields set to ZSTD encoding
-- Fact tables should be distributed even or keyed on the largest dimensional table commonly joined


-- Inserting Market Access Into a Separate Table & Unioning in the View because the VACCUUM takes too long.
DROP TABLE IF EXISTS rpt_apollo.ptab_f_sales_nbrx_terr_MA_old;

CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_nbrx_terr_MA_new
(
   customer_id           bigint  ENCODE ZSTD NOT NULL,
   product_id            integer  ENCODE ZSTD NOT NULL,
   day_id                integer  ENCODE ZSTD NOT NULL,
   dynamics_type_id      integer  ,
   position_id           integer  ENCODE ZSTD NOT NULL,
    from_product_id       integer  ENCODE ZSTD NOT NULL,
	territory_type            varchar(100) ,
   market                    varchar(100) ENCODE ZSTD ,
   therapeutic_class          varchar(100) ENCODE ZSTD,
   therapeutic_sub_class      varchar(100)  ENCODE ZSTD,
   week_ending_date           date         ENCODE ZSTD,
   "day"                      date         ENCODE ZSTD,
   nbrx_unaligned_id     varchar(255)  ENCODE ZSTD,
   poa_id                integer  ENCODE ZSTD,
   apportionment_nbrx    numeric(22,7)  ENCODE ZSTD,
   apportionment_ltrx    numeric(22,7)  ENCODE ZSTD,
 
   --Nbrx Dynamics Type Id from d_lov
   source_of_business		  varchar(50)  ENCODE ZSTD,
   --Brand Eligiblity Flag Yes/No
   brand_eligibility_flag  varchar(5)      ENCODE ZSTD,
   datasource_id           varchar(30)     ENCODE ZSTD,
   source_unique_id        varchar(30)     ENCODE ZSTD
)
COMPOUND SORTKEY (dynamics_type_id, territory_type, market, therapeutic_class, therapeutic_sub_class, week_ending_date, day) 
;

-- Inserting All Market Access Reusing the already completed alignments and joins from AOM and Diabetes in the performance tables
   INSERT INTO rpt_apollo.ptab_f_sales_nbrx_terr_MA_new
(      customer_id,
       product_id,
       day_id,
       dynamics_type_id,
       position_id,
	    from_product_id,
		territory_type,
       market,
       therapeutic_class,
       therapeutic_sub_class,
       week_ending_date,
       "day",
       nbrx_unaligned_id,
       poa_id,
       apportionment_nbrx,
       apportionment_ltrx,
	    source_of_business,
		brand_eligibility_flag,
        datasource_id,
		source_unique_id

)
(
SELECT 
   n.customer_id,           
   n.product_id          ,
   n.day_id,                 
      n.dynamics_type_id        ,
   nvl(fca.position_id, -99999)           ,
   n.from_product_id   ,
    case when pos.salesforce_value LIKE '%_O' THEN pos.salesforce_value else pos.type end as territory_type ,
  n.market,
  n.therapeutic_class,
  n.therapeutic_sub_class,
  n.week_ending_date,
  n."day",
   n.nbrx_unaligned_id       ,
  n.poa_id                 ,
   --Cast to 3 decimal places
 --This assume that apportionment_factor is always equal to 1 for market access  
  n.apportionment_nbrx     ,
  n.apportionment_ltrx,  
   --Nbrx Dynamics Type Id
  n.source_of_business		 ,
   --Brand Eligiblity Flag Yes/No
  n.brand_eligibility_flag  ,
    n.datasource_id,
   n.source_unique_id
FROM
  rpt_apollo.ptab_f_sales_nbrx_terr n
    INNER JOIN 
  (SELECT fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip
  from rpt_facts.f_customer_alignment fca
  group by fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip)
  fca ON (fca.customer_id = n.customer_id )
   INNER JOIN rpt_dims.d_position pos on fca.position_id = pos.position_id
   INNER JOIN rpt_dims.d_position_hierarchy phi on pos.position_id = phi.position_id
   INNER JOIN rpt_dims.d_poa poa on poa.poa_id = phi.poa_id 
   INNER JOIN rpt_dims.d_poa poa2 ON (poa2.poa_id = fca.poa_id)
  WHERE (poa.active_flag = 'CURRENT' and poa2.active_flag = 'CURRENT') and fca.alignment_level = 'TERRITORY' AND fca.datasource_id in ('PROF_MKTACC') AND UPPER(poa2.type) like '%SALES%' AND fca.sales_team ='RAM'
      --Using hardcoded territory types to match Connex
  and n.territory_type in ('DCS','EDCS','HDCS','OCS') and fca.overlay_position_id = n.position_id
 
)
;


VACUUM FULL  rpt_apollo.ptab_f_sales_nbrx_terr_MA_new to 99 PERCENT;	
ANALYZE  rpt_apollo.ptab_f_sales_nbrx_terr_MA_new ;		 

		
GRANT TRIGGER, RULE, SELECT, DELETE, UPDATE, REFERENCES, INSERT ON rpt_apollo.ptab_f_sales_nbrx_terr_MA_new TO oasis_cdw_tst_procuser;
GRANT SELECT ON rpt_apollo.ptab_f_sales_nbrx_terr_MA_new TO group oasis_cdw_tst_readuser_group;	 	


CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_nbrx_terr_MA
(
   customer_id           bigint  ENCODE ZSTD NOT NULL
);



ALTER TABLE rpt_apollo.ptab_f_sales_nbrx_terr_MA RENAME TO ptab_f_sales_nbrx_terr_MA_old;

ALTER TABLE rpt_apollo.ptab_f_sales_nbrx_terr_MA_new RENAME TO ptab_f_sales_nbrx_terr_MA; 
	  
	  
	  
	  
	 --Include all keys and fact attributes from f_sales_xptrx
--Include most commonly used dimensional attributes with high cardinality (territory_type, therapeutic_class, therapeutic_sub_class)

--Creating fact table that includes commonly used dimensional attributes
-- REM Add compression encoding
-- REM Add sort key & distribution
-- All sort keys should be encoded raw and all other fields set to ZSTD encoding
-- Fact tables should be distributed even or keyed on the largest dimensional table commonly joined


-- Inserting Market Access Into a Separate Table & Unioning in the View because the VACCUUM takes too long.
DROP TABLE IF EXISTS rpt_apollo.ptab_f_sales_xptrx_terr_MA_old;

CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_xptrx_terr_MA_new
(
   xpt_trx_ins_niad_aob_id  bigint ENCODE ZSTD,
   customer_id              integer ENCODE ZSTD NOT NULL,
   position_id              integer  ENCODE ZSTD NOT NULL,
   product_id               integer ENCODE ZSTD NOT NULL,
   day_id                   integer NOT NULL,
   poa_id                   integer ENCODE ZSTD,
   plan_id                  integer  NOT NULL,
   territory_type            varchar(100) ,
   market                    varchar(100) ENCODE ZSTD ,
   therapeutic_class          varchar(100) ENCODE ZSTD,
   therapeutic_sub_class      varchar(100)  ENCODE ZSTD,
   week_ending_date           date         ENCODE ZSTD,
   "day"                      date         ENCODE ZSTD,
   apportionment_niad_trx   numeric(22,7) ENCODE ZSTD,
   apportionment_niad_nrx   numeric(22,7) ENCODE ZSTD,
   apportionment_trx        numeric(22,7) ENCODE ZSTD,
   apportionment_nrx        numeric(22,7) ENCODE ZSTD,
   category                 integer ENCODE ZSTD,
   zip                      varchar(10) ENCODE ZSTD,
   --Flags
   brand_eligibility_flag   varchar(100) ENCODE ZSTD,
   first_time_writer_flag      varchar(100) ENCODE ZSTD,
   recurrent_writer_flag     varchar(100)   ENCODE ZSTD,
   recurrent_writer_alt_flag    varchar(100)  ENCODE ZSTD,
   plan_exclusion_flag			varchar (100)  ENCODE ZSTD,
    datasource_id           varchar(30)     ENCODE ZSTD,
   source_unique_id        varchar(30)     ENCODE ZSTD
   
 
)
COMPOUND SORTKEY (territory_type, market, therapeutic_class, therapeutic_sub_class, week_ending_date, day) 
;


   INSERT INTO rpt_apollo.ptab_f_sales_xptrx_terr_MA_new
(
   xpt_trx_ins_niad_aob_id,
       customer_id,
       position_id,
       product_id,
       day_id,
       poa_id,
       plan_id,
	   apportionment_niad_trx,
       apportionment_niad_nrx,
       apportionment_trx,
       apportionment_nrx,
	   territory_type,
       market,
       therapeutic_class,
       therapeutic_sub_class,
       week_ending_date,
       "day",
       category,
       zip,
       brand_eligibility_flag,
       first_time_writer_flag,
       recurrent_writer_flag,
       recurrent_writer_alt_flag,
	   plan_exclusion_flag   ,
	   datasource_id,
		source_unique_id
)


--Pulling for market access anti-obesity using a join on overlay_position_id
(SELECT 
  n.xpt_trx_ins_niad_aob_id  ,
   n.customer_id               ,
   fca.position_id               ,
   n.product_id                ,
   n.day_id                   ,
   poa2.poa_id                    ,
   n.plan_id                   ,
   n.apportionment_niad_trx,
   n.apportionment_niad_nrx,
   n.apportionment_trx,
   n.apportionment_nrx,
   case when pos.salesforce_value LIKE '%_O' THEN pos.salesforce_value else pos.type end as territory_type ,
   n.market,
   n.therapeutic_class,
   n.therapeutic_sub_class,
   n.week_ending_date,
   n."day",
   n.category                  ,
   fca.zip                      ,
   n.brand_eligibility_flag  ,
   n.first_time_writer_flag,   
   n.recurrent_writer_flag  ,
   n.recurrent_writer_alt_flag ,
   n.plan_exclusion_flag   ,
   n.datasource_id,
   n.source_unique_id
   
FROM
  rpt_apollo.ptab_f_sales_xptrx_terr n
  INNER JOIN 
  (SELECT fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip
  from rpt_facts.f_customer_alignment fca
  group by fca.customer_id, fca.position_id, fca.poa_id, fca.alignment_level, fca.sales_team, fca.alignment_name, fca.apportionment_factor, fca.datasource_id, fca.overlay_position_id, fca.zip)
  fca ON (fca.customer_id = n.customer_id )
   INNER JOIN rpt_dims.d_position pos on fca.position_id = pos.position_id
   INNER JOIN rpt_dims.d_position_hierarchy phi on pos.position_id = phi.position_id
   INNER JOIN rpt_dims.d_poa poa on poa.poa_id = phi.poa_id 
   INNER JOIN rpt_dims.d_poa poa2 ON (poa2.poa_id = fca.poa_id)
  --Adding Target Flags  
  WHERE (poa.active_flag = 'CURRENT' and poa2.active_flag = 'CURRENT') and fca.alignment_level = 'TERRITORY' AND fca.datasource_id in ('PROF_MKTACC') AND UPPER(poa2.type) like '%SALES%' AND fca.sales_team ='RAM'
      --Using hardcoded territory types to match Connex
  and n.territory_type in ('DCS','EDCS','HDCS','OCS') and fca.overlay_position_id = n.position_id
) 
;

VACUUM FULL  rpt_apollo.ptab_f_sales_xptrx_terr_MA_new to 99 PERCENT;
ANALYZE rpt_apollo.ptab_f_sales_xptrx_terr_MA_new; 



GRANT TRIGGER, RULE, SELECT, DELETE, UPDATE, REFERENCES, INSERT ON rpt_apollo.ptab_f_sales_xptrx_terr_MA_new TO oasis_cdw_tst_procuser;
GRANT SELECT ON rpt_apollo.ptab_f_sales_xptrx_terr_MA_new TO group oasis_cdw_tst_readuser_group; 



CREATE TABLE IF NOT EXISTS rpt_apollo.ptab_f_sales_xptrx_terr_MA
(
   customer_id           bigint  ENCODE ZSTD NOT NULL
);





ALTER TABLE rpt_apollo.ptab_f_sales_xptrx_terr_MA RENAME TO ptab_f_sales_xptrx_terr_MA_old;

ALTER TABLE rpt_apollo.ptab_f_sales_xptrx_terr_MA_new RENAME TO ptab_f_sales_xptrx_terr_MA;




